{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","toggleModal","updateTodo","getUserById","isModalOpen","handleClick","useMemo","todo","userId","className","map","classNames","id","completed","title","type","onClick","TodoFilter","updateSearchField","updateSortField","searchField","sortField","onChange","event","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","user","isLoadingUser","href","name","SortFieldEnum","App","useState","setTodos","visibleTodo","setVisibleTodo","isLoading","setIsLoading","setIsModalOpen","visibleUser","setVisibleUser","setIsLoadingUser","setSearchField","setSortField","useEffect","catch","error","console","warn","finally","visibleTodos","visibleFilteredTodos","searchFieldNormalize","toLowerCase","trim","filter","includes","filterTodos","str","getUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4932980.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  toggleModal: () => void;\n  updateTodo: (todo: Todo) => void;\n  getUserById: (userId: number) => void;\n  isModalOpen: boolean;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  toggleModal,\n  updateTodo,\n  getUserById,\n  isModalOpen,\n}) => {\n  const handleClick = useMemo(() => {\n    return (todo: Todo, userId: number) => {\n      toggleModal();\n      updateTodo(todo);\n      getUserById(userId);\n    };\n  }, [toggleModal, updateTodo, getUserById]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isModalOpen,\n              '': !isModalOpen,\n            })}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleClick(todo, todo.userId)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames({\n                      'far fa-eye': !isModalOpen,\n                      'far fa-eye-slash': isModalOpen,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\n// eslint-disable-next-line import/no-cycle\nimport { SortFieldEnum } from '../../App';\n\ntype Props = {\n  updateSearchField: (str: string) => void;\n  updateSortField: (\n    str: (typeof SortFieldEnum)[keyof typeof SortFieldEnum]\n  ) => void;\n  searchField: string;\n  sortField: (typeof SortFieldEnum)[keyof typeof SortFieldEnum];\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  updateSearchField,\n  updateSortField,\n  searchField,\n  sortField,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) =>\n              // eslint-disable-next-line implicit-arrow-linebreak\n              updateSortField(\n                event.target\n                  .value as (typeof SortFieldEnum)[keyof typeof SortFieldEnum],\n              )}\n            value={sortField}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchField}\n          onChange={(event) => updateSearchField(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {searchField && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => updateSearchField('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo | null;\n  user: User | null;\n  toggleModal: () => void;\n  isLoadingUser: boolean;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  toggleModal,\n  todo,\n  user,\n  isLoadingUser,\n}) => {\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoadingUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={toggleModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable import/no-cycle */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos, getUser } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\nimport { User } from './types/User';\n\nexport const SortFieldEnum = {\n  COMPLETED: 'completed',\n  ACTIVE: 'active',\n  NONE: '',\n};\n\ntype FilterArgs = {\n  searchField: string;\n  sortField: (typeof SortFieldEnum)[keyof typeof SortFieldEnum];\n};\n\nfunction filterTodos(todos: Todo[], { searchField, sortField }: FilterArgs) {\n  let visibleFilteredTodos = [...todos];\n\n  if (searchField) {\n    const searchFieldNormalize = searchField.toLowerCase().trim();\n\n    visibleFilteredTodos = visibleFilteredTodos.filter((todo) => {\n      return todo.title.toLowerCase().trim().includes(searchFieldNormalize);\n    });\n  }\n\n  if (sortField) {\n    visibleFilteredTodos = visibleFilteredTodos.filter((todo) => {\n      switch (sortField) {\n        case SortFieldEnum.ACTIVE:\n          return !todo.completed;\n        case SortFieldEnum.COMPLETED:\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n  }\n\n  return visibleFilteredTodos;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodo, setVisibleTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [visibleUser, setVisibleUser] = useState<User | null>(null);\n  const [isLoadingUser, setIsLoadingUser] = useState(false);\n  const [searchField, setSearchField] = useState('');\n  const [sortField, setSortField]\n    = useState<(typeof SortFieldEnum)[keyof typeof SortFieldEnum]>('');\n\n  const getUserById = (userId: number) => {\n    setIsLoadingUser(true);\n    getUser(userId)\n      .then((user) => setVisibleUser(user))\n      .catch((error) => {\n        console.warn(error);\n      })\n      .finally(() => setIsLoadingUser(false));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then((todo) => setTodos(todo))\n      .catch((error) => {\n        console.warn(error);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const updateTodo = (todo: Todo) => {\n    setVisibleTodo(todo);\n  };\n\n  const updateSearchField = (str: string) => {\n    setSearchField(str);\n  };\n\n  const updateSortField = (\n    str: (typeof SortFieldEnum)[keyof typeof SortFieldEnum],\n  ) => {\n    setSortField(str);\n  };\n\n  const visibleTodos = useMemo(\n    () => filterTodos(todos, { searchField, sortField }),\n    [todos, searchField, sortField],\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                updateSearchField={updateSearchField}\n                searchField={searchField}\n                updateSortField={updateSortField}\n                sortField={sortField}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  toggleModal={toggleModal}\n                  isModalOpen={isModalOpen}\n                  updateTodo={updateTodo}\n                  getUserById={getUserById}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isModalOpen && (\n        <TodoModal\n          toggleModal={toggleModal}\n          todo={visibleTodo}\n          user={visibleUser}\n          isLoadingUser={isLoadingUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}