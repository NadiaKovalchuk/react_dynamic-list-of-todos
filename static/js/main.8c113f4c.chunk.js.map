{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","toggleModal","updateTodo","getUserById","isModalOpen","className","map","todo","id","completed","classNames","title","type","onClick","userId","handleClick","TodoFilter","updateSearchField","updateSortField","searchField","sortField","onChange","event","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","user","isLoadingUser","console","log","href","name","App","useState","setTodos","visibleTodo","setVisibleTodo","isLoading","setIsLoading","setIsModalOpen","visibleUser","setVisibleUser","setIsLoadingUser","setSearchField","setSortField","useEffect","finally","visibleTodos","visibleFilteredTodos","searchFieldNormalize","toLowerCase","trim","filter","includes","filteredTodos","str","getUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c113f4c.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  toggleModal: () => void;\n  updateTodo: (todo: Todo) => void;\n  getUserById: (userId: number) => void;\n  isModalOpen: boolean;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  toggleModal,\n  updateTodo,\n  getUserById,\n  isModalOpen,\n}) => {\n  function handleClick(todo: Todo, userId: number) {\n    toggleModal();\n    updateTodo(todo);\n    getUserById(userId);\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleClick(todo, todo.userId)}\n              >\n                <span className=\"icon\">\n                  {!isModalOpen ? (\n                    <i className=\"far fa-eye\" />\n                  ) : (\n                    <i className=\"far fa-eye-slash\" />\n                  )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable implicit-arrow-linebreak */\n/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable react/jsx-curly-newline */\nimport React from 'react';\n\ntype Props = {\n  updateSearchField: (str: string) => void;\n  updateSortField: (str: 'completed' | 'active' | '') => void;\n  searchField: string;\n  sortField: 'completed' | 'active' | '';\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  updateSearchField,\n  updateSortField,\n  searchField,\n  sortField,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) =>\n              updateSortField(event.target.value as 'completed' | 'active' | '')\n            }\n            value={sortField}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchField}\n          onChange={(event) => updateSearchField(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {searchField && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => updateSearchField('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo | null;\n  user: User | null;\n  toggleModal: () => void;\n  isLoadingUser: boolean;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  toggleModal,\n  todo,\n  user,\n  isLoadingUser,\n}) => {\n  console.log(todo, user, isLoadingUser);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoadingUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={toggleModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos, getUser } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\nimport { User } from './types/User';\n\ntype FilterArgs = {\n  searchField: string;\n  sortField: 'completed' | 'active' | '';\n};\n\nfunction filteredTodos(todos: Todo[], { searchField, sortField }: FilterArgs) {\n  let visibleFilteredTodos = [...todos];\n\n  if (searchField) {\n    const searchFieldNormalize = searchField.toLowerCase().trim();\n\n    visibleFilteredTodos = visibleFilteredTodos.filter((todo) => {\n      return todo.title.toLowerCase().trim().includes(searchFieldNormalize);\n    });\n  }\n\n  if (sortField) {\n    visibleFilteredTodos = visibleFilteredTodos.filter((todo) => {\n      switch (sortField) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n  }\n\n  return visibleFilteredTodos;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodo, setVisibleTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [visibleUser, setVisibleUser] = useState<User | null>(null);\n  const [isLoadingUser, setIsLoadingUser] = useState(false);\n  const [searchField, setSearchField] = useState('');\n  const [sortField, setSortField] = useState<'completed' | 'active' | ''>('');\n\n  console.log(visibleUser, isLoadingUser);\n\n  const getUserById = (userId: number) => {\n    setIsLoadingUser(true);\n    getUser(userId)\n      .then((user) => setVisibleUser(user))\n      .finally(() => setIsLoadingUser(false));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then((todo) => setTodos(todo))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const updateTodo = (todo: Todo) => {\n    setVisibleTodo(todo);\n  };\n\n  const updateSearchField = (str: string) => {\n    setSearchField(str);\n  };\n\n  const updateSortField = (str: 'completed' | 'active' | '') => {\n    setSortField(str);\n  };\n\n  const visibleTodos = filteredTodos(todos, { searchField, sortField });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                updateSearchField={updateSearchField}\n                searchField={searchField}\n                updateSortField={updateSortField}\n                sortField={sortField}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  toggleModal={toggleModal}\n                  isModalOpen={isModalOpen}\n                  updateTodo={updateTodo}\n                  getUserById={getUserById}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isModalOpen && (\n        <TodoModal\n          toggleModal={toggleModal}\n          todo={visibleTodo}\n          user={visibleUser}\n          isLoadingUser={isLoadingUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}